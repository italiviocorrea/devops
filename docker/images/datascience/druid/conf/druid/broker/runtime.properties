# Advertised hostname.
druid.host=broker
# The name of the service. This is used as a dimension when emitting metrics and alerts to differentiate between the various services.
druid.service=druid/broker
# This is the port to actually listen on; unless port mapping is used, this will be the same port as is on druid.host.
druid.port=8082

# Determines how the broker balances connections to historical nodes. random choose randomly, connectionCount picks the node with the fewest number of active connections to.
druid.broker.balancer.type=connectionCount

# Size of connection pool for the Broker to connect to historical and real-time nodes. If there are more queries than this number that all need to speak to the same node, then they will queue up.
druid.broker.http.numConnections=16
# Number of threads for HTTP requests.
druid.server.http.numThreads=21
# The timeout for data reads.
druid.broker.http.readTimeout=PT5M
# The Jetty max idle time for a connection.
druid.server.http.maxIdleTime=PT5M

# This specifies a buffer size for the storage of intermediate results. The computation engine in both the Historical and Realtime nodes will use a scratch buffer of this size to do all of their intermediate computations off-heap. Larger values allow for more aggregations in a single pass over the data while smaller values can require more passes depending on the query that is being executed.
druid.processing.buffer.sizeBytes=512000000
# The number of processing threads to have available for parallel processing of segments. Our rule of thumb is num_cores - 1, which means that even under heavy load there will still be one core available to do background tasks like talking with ZooKeeper and pulling down segments. If only one core is available, this property defaults to the value 1.
druid.processing.numThreads=21

druid.broker.cache.useCache=true
druid.broker.cache.populateCache=true
druid.cache.type=local
druid.cache.sizeInBytes=10000000000
